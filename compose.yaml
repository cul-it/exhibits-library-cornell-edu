# Docker compose file for development environment
# Run with: docker compose up

services:
  webapp:
    build:
      context: .
      target: development
    image: exhibits
    stdin_open: true
    tty: true
    env_file:
      - .env
    environment:
      - PORT=9292
    volumes:
      - .:/exhibits
      - gems:/usr/local/bundle
    ports:
      - 9292:9292
    depends_on:
      - mysql
      - redis
      - solr

  mysql:
    image: mariadb:10.6
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_RAILS_ROOT_PW}
      - MYSQL_USER=${DATABASE_RAILS_USER}
      - MYSQL_PASSWORD=${DATABASE_RAILS_USER_PW}
      - MYSQL_DATABASE=${DATABASE_NAME_PREFIX}_development
    ports:
      - 3306:3306
    volumes:
      - db-data:/var/lib/mysql/data

  solr:
    image: solr:8.11.1
    ports:
      - 8983:8983
    command:
      - solr-precreate
      - blacklight-core
      - /opt/solr/server/configsets/exhibitsconf
    volumes:
      - solr_home:/opt/solr/server/solr
      - ./solr/config:/opt/solr/server/configsets/exhibitsconf

  # This doesn't even match current redis, I don't think? Gemfile.lock has it at 4.5 - but sidekiq is overdue for an upgrade
  redis:
    image: redis:5-alpine
    volumes:
      - redis:/data
    ports:
      - 6379:6379
    command:
      - redis-server

volumes:
  db-data:
  gems:
  redis:
  solr_home:

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# services:
#   app:
#     build:
#       context: .
#       target: final
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
